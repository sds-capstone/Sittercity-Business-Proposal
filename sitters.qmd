---
iris---
title: "siiters_eda"
format: html
editor: visual
---

## 

```{r}
#loading libraries
library(tidyverse)
library(readr)
library(lubridate)
library(janitor)
library(stringr)
```

```{r}
#reading sitters dataset 
data <- read_csv("data/sitters_data.csv")
```

```{r}
#cleaning data 

#renaming columns with underscore and lowercase for better use
data <- data %>%
        clean_names()

#splitting numbers into min and max columns 
  
data <- separate(data, col=sitter_profiles_babysitter_pay_rate, into=c('sitters_pay_min', 'sitters_pay_max'), sep=',',remove = TRUE)

#using gsub to extract only the numbers from the strings

data <- data %>% 
  mutate(sitters_pay_min = as.numeric(gsub(".*?([0-9]+).*","\\1", sitters_pay_min))) %>% 
  mutate(sitters_pay_max = as.numeric(gsub(".*?([0-9]+).*","\\1", sitters_pay_max)))

#how to get rid of the last two digits in each row? 

data <- data %>% 
  mutate(sitters_pay_min = str_sub(data$sitters_pay_min, 1, str_length(data$sitters_pay_min)-2),
  sitters_pay_max = str_sub(data$sitters_pay_max, 1, str_length(data$sitters_pay_max)-2)) 


```

```{r}
#calculating age based on birthdate 
#installing package to calculate age 
install.packages("eeptools") 
library("eeptools")

```

```{r}

data_wide <- data %>% 
  pivot_wider(names_from = sitter_profiles_additional_services, values_from = sitters_member_id)

# age from dob
data_wide$sitters_birth_date = as.numeric(difftime(Sys.Date(),data_wide$sitters_birth_date, units = "weeks"))/52.25

data_wide$sitters_birth_date<- round(data_wide$sitters_birth_date, digits = 0)


```

```{r}

#filter the zip codes to only the counties we are interested in 

data_counties <- data_wide %>% 
mutate(counties = case_when(grepl("01301|01364|01376|01373| 01370|01375|01360|01337|01351|01039|01340|01354|01341|01054| 01339|01344|01072|01342|01330|01355|01378|01349|01379|01367|01350| 01338|01380|01346|01302|01347|01093", sitters_zipcode, ignore.case = TRUE) ~ "Franklin", 

grepl("01085| 01040| 01109| 01020| 01089| 01108| 01104| 01013| 01056| 01028| 01106| 01001| 01095| 01118| 01119| 01030| 01105| 01069| 01107| 01151| 01077| 01057| 01129| 01036| 01010| 01114| 01195| 01133| 01128| 01022| 01050| 01521| 01103| 01034| 01080| 01081| 01071| 01011| 01008| 01029| 01009| 01014| 01021| 01041| 01079| 01086| 01090| 01097| 01101| 01102| 01111| 01115| 01116| 01138| 01139| 01144| 01152| 01199",sitters_zipcode, ignore.case = TRUE) ~ "Hampden",

grepl("01453| 01420| 01604| 01545| 01605| 01757| 01602| 01606| 01610| 01440| 01581| 01609| 01603| 01570| 01550| 01501| 01520| 01532| 01510| 01569| 01527| 01331| 01507| 01082| 01562| 01571| 01607| 01462| 01540| 01772| 01475| 01588| 01590| 01504| 01543| 01516| 01473| 01583| 01564| 01568| 01519| 01523| 01524| 01536| 01566| 01534| 01585| 01756| 01747| 01451| 01430| 01740| 01005| 01612| 01468| 01608| 01535| 01010| 01560| 01452| 01505| 01506| 01541| 01503| 01518| 01436| 01529| 01522| 01542| 01434| 01515| 01537| 01611| 01368| 01068| 01531| 01366| 01031| 01083| 01037| 01745| 01074| 01477| 01517| 01580| 01582| 01654| 01613| 01092| 01094| 01438| 01441| 01467| 01655| 01508| 01509| 01525| 01526| 01538| 01546| 01561| 01586| 01601| 01614| 01615| 01653",sitters_zipcode, ignore.case = TRUE) ~ "Worcester",

grepl("01201| 01247| 01230| 01267| 01220| 01226| 01238| 01240| 01225| 01235| 01223| 01257| 01237| 12168| 01266| 01245| 01254| 01008| 01258| 01270| 01236| 01255| 01262| 01259| 01253| 01256| 01222| 01264| 01350| 01229| 01029| 01260| 01343| 01224| 01202| 01203| 01227| 01242| 01244| 01252| 01263", sitters_zipcode, ignore.case = TRUE) ~ "Berkshire",

grepl("01002| 01075| 01027| 01060| 01007| 01003| 01082| 01062| 01073| 01033| 01035| 01050| 01038| 01039| 01096| 01053| 01011| 01026| 01098| 01088| 01063| 01070| 01032| 01012| 01084| 01066| 01243| 01004| 01059| 01061", sitters_zipcode, ignore.case = TRUE) ~ "Hampshire", TRUE ~ "Other"
))
  

```

```{r}
#Merging current dataset with new ratings dataset using 

#read new dataset with ratings 
ratings <- read_csv("data/rating_sitters.csv")

#renaming columns with underscore and lowercase for better use
ratings <- ratings %>%
        clean_names()


```

```{r}

rating_sitters <- ratings %>%
  inner_join(data, by = c("sitters_member_id" = "sitters_member_id", "sitters_user_id" = "sitters_user_id"))
```
