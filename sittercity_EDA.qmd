```{r}

```

---
title: "sittercity_EDA"
format: html
editor: visual
---

## 

```{r}
#loading libraries
library(tidyverse)
library(readr)
library(lubridate)
```

```{r}
# get filepath
filepath <- paste0(getwd(), "/data")

# create file name paths
filenames_path <- paste0(filepath,"/",list.files(filepath))

# file names
filenames <- gsub(pattern = ".csv", "", x = list.files(filepath))

# read csvs
data <- lapply(filenames_path, read_csv)

# assign list of df to dataframes
for (i in seq_along(data)){
  assign(filenames[i],as.data.frame(data[i][1])) 
}

rm(data)
```

```{r}
#Merging dataset with locations id and original data sample 
locations <- locations %>%  
  select(id,cityname,stateabbr,statename)

#merge id and location_id
merged_data <- data_filtered %>% 
  inner_join(locations, by = c("location_id" = "id"))


#Renaming column "type" to just either "Provider" or "Seeker" 
#mutate(new_variable = existing_variable/3)

merged_data <- merged_data %>% 
    mutate(
    type = recode(type, "Account::Provider" = "provider")
    ) %>% 
  mutate(
    type = recode(type, "Account::Seeker" = "seeker")
    )
```

Exploratory Data Analysis

```{r}
head(merged_data)
summary(merged_data)
dim(merged_data)
```

```{r}
## group_by states and type of service provided (provider_type and provider)

df_by_state <- merged_data %>%
  group_by(provider_type,
           type,
           statename,
           stateabbr,
           cityname) %>%
  summarise(count = n())

```

```{r}
#Creating proportions
proportions <- df_by_state %>% 
  select(provider_type, 
         type,
         statename,
         stateabbr,
         count,
         cityname) %>% 
  filter(type == "provider") %>%
  group_by(type,
           statename,
           count,
           cityname)

proportion_cityname <- proportions %>% 
  filter(count > 75)

#%>% 
  #mutate(proportion = count / sum(count) * 100)

```

```{r}
<<<<<<< HEAD
# Load the dplyr package if not already loaded
library(dplyr)

top_babysitter_cities_states <- merged_data %>%
  filter(type == "Account::Provider", provider_type == "babysitter") %>%
  group_by(cityname, stateabbr, provider_type) %>%
  summarise(count = n()) %>%
  arrange(desc(count))

# Print the top babysitter cities and states for account: provider type
print(top_babysitter_cities_states)


=======
#plot 
ggplot(data = proportions , aes(x = cityname , y = count, fill = provider_type)) + geom_col() + scale_fill_brewer(palette = "Paired") +
  scale_fill_brewer(palette = "Paired")+
  ylab("Count")+
  ggtitle("Count of providers type by state") +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())


barplot <- ggplot(proportion_cityname, aes(x = cityname, y = count, fill = provider_type))+
  geom_col(position = "dodge")+
  facet_wrap(~cityname)+
  scale_fill_brewer(palette = "Paired")+
  ylab("Count")+
  ggtitle("Top 5 cities with the most providers") +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
barplot
>>>>>>> 7d87a5a5904bae4266ef29d79fbfbced21d3bba4

```

```{r}
<<<<<<< HEAD
# Load the dplyr package if not already loaded
library(dplyr)

# Assuming your dataset is named 'merged_data'
top_city_seekers <- merged_data %>%
  filter(type == "Account::Seeker") %>%
  group_by(cityname, stateabbr) %>%
  summarise(seeker_count = n()) %>% 
  arrange(desc(seeker_count))
# Print the result
print(top_city_seekers)


```
=======
#plot 
ggplot(data = proportions , aes(x = stateabbr , y = count, fill = provider_type)) + geom_col() + scale_fill_brewer(palette = "Paired") +
  scale_fill_brewer(palette = "Paired")+
  ylab("Count")+
  ggtitle("Count of providers type by state") +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())


barplot <- ggplot(proportions, aes(x = stateabbr, y = count, fill = provider_type))+
  geom_col(position = "dodge")+
  facet_wrap(~stateabbr)+
  scale_fill_brewer(palette = "Paired")+
  ylab("Count")+
  ggtitle("Top 5 states with the most providers") +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
barplot

```

```{r}

#Not used yet but will be helpful
# map
#install.packages("usmap")
library(usmap) #import the package
library(ggplot2) #use ggplot2 to add layer for visualization

#### MAP PRPOPORTIONS
proportions <- proportions %>% 
  rename(state = StateAbbr)

plot_usmap(data = proportions, values = "proportion", regions = "states", color = "blue") + 
  scale_fill_continuous(low = "white", high = "red", name = "Proportion", label = scales::comma) +
  labs(title = "Prop of Categories by U.S. States") + 
  theme(panel.background=element_blank(),
        legend.position = "right") +
  facet_wrap(~Category)


#### MAP COUNT
df_by_state <- df_by_state %>% 
  rename(state = StateAbbr)


plot_usmap(data = df_by_state, values = "count", regions = "states", color = "blue") + 
  scale_fill_continuous(low = "white", high = "red", name = "Count", label = scales::comma) +
  labs(title = "Count of Categories by U.S. States") + 
  theme(panel.background=element_blank(),
        legend.position = "right") +
  facet_wrap(~Category)
```
>>>>>>> 7d87a5a5904bae4266ef29d79fbfbced21d3bba4
